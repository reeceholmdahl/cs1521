Script started on 2021-03-10 16:16:50-0600
1% cd build/
2% make clean
3% cd ..
4% pwd
/home/csugrads/holmd353/projects/project4
5% ls -l
total 44
drwxr-xr-x 3 holmd353 student 4096 Mar 10 16:17 build
-rw------- 1 holmd353 student  348 Mar 10 16:14 CMakeLists.txt
-rw------- 1 holmd353 student  479 Mar 10 16:14 DivisionByZeroExcep.h
-rw------- 1 holmd353 student  529 Mar 10 16:15 driver.cpp
-rw------- 1 holmd353 student 3174 Mar 10 16:15 Infix.cpp
-rw------- 1 holmd353 student 2202 Mar 10 16:14 Infix.h
-rwx------ 1 holmd353 student 1985 Mar 10 16:15 LinkedStack.cpp
-rwx------ 1 holmd353 student  973 Mar 10 16:15 LinkedStack.h
-rwx------ 1 holmd353 student  914 Mar 10 16:15 Node.cpp
-rwx------ 1 holmd353 student  789 Mar 10 16:15 Node.h
-rwx------ 1 holmd353 student 1647 Mar 10 16:15 StackInterface.h
-rw------- 1 holmd353 student    0 Mar 10 16:16 typescript.txt
6% cat -n Cma[K[KMakeLists.txt 
     1	# My ID: 5727889
     2	cmake_minimum_required(VERSION 3.10)
     3	
     4	project("Project 4"
     5	  VERSION 0.0.0
     6	  DESCRIPTION "CS 1521-9 Project 4 Infix Expressions with Stacks"
     7	  LANGUAGES CXX)
     8	
     9	add_compile_options(-Wall -Wextra -Wpedantic)
    10	
    11	set(CXX_STANDARD 17)
    12	set(CXX_STANDARD_REQUIRED ON)
    13	set(CXX_EXTENSIONS OFF)
    14	
    15	add_executable(project4
    16	  driver.cpp
    17	  Infix.cpp)
7% cat -n driver.cpp 
     1	// My ID: 5727889
     2	#include <iostream>
     3	
     4	#include "Infix.h"
     5	#include "LinkedStack.h"
     6	#include "DivisionByZeroExcep.h"
     7	
     8	using std::cout;
     9	using std::cin;
    10	using std::endl;
    11	using std::string;
    12	
    13	int main() {
    14	
    15	  Infix infixExp;
    16	
    17	  string exp;
    18	  while (getline(cin, exp) ) {
    19	    infixExp.setExpression(exp);
    20	
    21	    cout << exp << " = ";
    22	
    23	    try {
    24	      int result = infixExp.evaluate();
    25	      cout << result;
    26	    } catch (const DivisionByZeroExcep& e) {
    27	      std::cerr << e.what();
    28	    }
    29	
    30	    cout << endl;
    31	  }
    32	  
    33	return EXIT_SUCCESS;
    34	  }
8% cat -n StackInterface.h 
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *  @term Spring 2021
     6	 *
     7	 *  StackInterface class template definition.
     8	 *
     9	 *  Adapted from page 197 in Carrano 7e.
    10	 *
    11	 *  @author Frank M. Carrano
    12	 *  @author Timothy Henry
    13	 *  @author Steve Holtz
    14	 *
    15	 *  @date 13 Feb 2021
    16	 *
    17	 *  @version 7.0 */
    18	
    19	#ifndef STACK_INTERFACE_
    20	#define STACK_INTERFACE_
    21	
    22	/** @class StackInterface StackInterface.h "StackInterface.h"
    23	 *
    24	 *  Definition of StackInterface class template. */
    25	template <typename ItemType>
    26	class StackInterface {
    27	public:
    28	   /** Virtual destructor. */
    29	   virtual ~StackInterface() = default;
    30	
    31	   /** Tests whether this stack is empty.
    32	    *
    33	    *  @pre None.
    34	    *
    35	    *  @post None.
    36	    *
    37	    *  @return True if this stack is empty, or false. */
    38	   virtual bool isEmpty() const = 0;
    39	
    40	   /** Adds a new entry to the top of this stack.
    41	    *
    42	    *  @pre None.
    43	    *
    44	    *  @post If successful, newEntry is stored at the top of this
    45	    *        stack.
    46	    *
    47	    *  @param newEntry The object to be added as a new entry.
    48	    *
    49	    *  @return True if addition was successful, or false. */
    50	   virtual bool push(const ItemType& newEntry) = 0;
    51	
    52	   /** Removes the top of this stack.
    53	    *
    54	    *  @pre None.
    55	    *
    56	    *  @post If successful, the top of this stack has been removed.
    57	    *
    58	    *  @return True if removal was successful, or false. */
    59	   virtual bool pop() = 0;
    60	
    61	   /** Retrieves the top of this stack.
    62	    *
    63	    *  @pre This stack is not empty.
    64	    *
    65	    *  @post None.
    66	    *
    67	    *  @return The top of this stack.
    68	    *
    69	    *  @throws PrecondViolatedExcep If the precondition is violated. */
    70	   virtual ItemType peek() const = 0;
    71	};
    72	
    73	#endif
9% cat -n LinkedStack.h
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *  @term Spring 2021
     6	 *
     7	 *  Header file for a pointer-based implementation of the ADT stack.
     8	 *
     9	 *  Adapted from page 246 in Carrano 7e.
    10	 *
    11	 *  @author Frank M. Carrano
    12	 *  @author Timothy Henry
    13	 *  @author Steve Holtz
    14	 *
    15	 *  @date 18 Feb 2021
    16	 *
    17	 *  @version 7.0 */
    18	
    19	#ifndef LINKED_STACK_
    20	#define LINKED_STACK_
    21	
    22	#include "StackInterface.h"
    23	#include "Node.h"
    24	
    25	/** @class LinkedStack LinkedStack.h "LinkedStack.h"
    26	 *
    27	 *  Specification of a pointer-based ADT stack. */
    28	template <typename ItemType>
    29	class LinkedStack : public StackInterface<ItemType> {
    30	private:
    31	   using NodePtr = Node<ItemType>*;
    32	
    33	   NodePtr topPtr = nullptr;
    34	
    35	public:
    36	   LinkedStack() = default;
    37	
    38	   LinkedStack(const LinkedStack<ItemType>& aStack);
    39	
    40	   virtual ~LinkedStack();
    41	
    42	   virtual bool isEmpty() const;
    43	
    44	   virtual bool push(const ItemType& newEntry);
    45	
    46	   virtual bool pop();
    47	
    48	   virtual ItemType peek() const;
    49	};
    50	
    51	#include "LinkedStack.cpp"
    52	
    53	#endif
10% cat -n LinkedStack.h[Kcpp
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *  @term Spring 2021
     6	 *
     7	 *  Implementation file for a pointer-based implementation of the ADT
     8	 *  stack.
     9	 *
    10	 *  Adapted from pages 246-8 in Carrano 7e.
    11	 *
    12	 *  @author Frank M. Carrano
    13	 *  @author Timothy Henry
    14	 *  @author Steve Holtz
    15	 *
    16	 *  @date 18 Feb 2021
    17	 *
    18	 *  @version 7.0 */
    19	
    20	// #define NDEBUG
    21	
    22	#include <new>
    23	
    24	#include <cassert>
    25	
    26	template <typename ItemType>
    27	LinkedStack<ItemType>::LinkedStack(const LinkedStack<ItemType>& aStack) {
    28	
    29	   if (!aStack.topPtr) {
    30	      topPtr = nullptr;
    31	   }
    32	   else {
    33	      NodePtr origChainPtr(aStack.topPtr);
    34	
    35	      try {
    36	         topPtr = new Node<ItemType>(origChainPtr->getItem() );
    37	
    38	         NodePtr newChainPtr(topPtr);
    39	
    40	         origChainPtr = origChainPtr->getNext();
    41	
    42	         while (origChainPtr) {
    43	            newChainPtr->setNext(new Node<ItemType>(origChainPtr->getItem()) );
    44	
    45	            newChainPtr = newChainPtr->getNext();
    46	            origChainPtr = origChainPtr->getNext();
    47	         }
    48	      }
    49	      catch (const std::bad_alloc&) {
    50	         while (!isEmpty() ) {
    51	            pop();
    52	         }
    53	         throw;
    54	      }
    55	   }
    56	}
    57	
    58	template <typename ItemType>
    59	LinkedStack<ItemType>::~LinkedStack() {
    60	
    61	   while (!isEmpty() ) {
    62	      pop();
    63	   }
    64	}
    65	
    66	template <typename ItemType>
    67	bool LinkedStack<ItemType>::isEmpty() const {
    68	
    69	   return !topPtr;
    70	}
    71	
    72	template <typename ItemType>
    73	bool LinkedStack<ItemType>::push(const ItemType& newItem) {
    74	
    75	   try {
    76	      topPtr = new Node<ItemType>(newItem,
    77	                                  topPtr);
    78	   }
    79	   catch (const std::bad_alloc&) {
    80	      return false;
    81	   }
    82	
    83	   return true;
    84	}
    85	
    86	template <typename ItemType>
    87	bool LinkedStack<ItemType>::pop() {
    88	
    89	   if (!isEmpty() ) {
    90	      NodePtr nodeToDeletePtr(topPtr);
    91	
    92	      topPtr = topPtr->getNext();
    93	
    94	      delete nodeToDeletePtr;
    95	
    96	      return true;
    97	   }
    98	
    99	   return false;
   100	}
   101	
   102	template <typename ItemType>
   103	ItemType LinkedStack<ItemType>::peek() const {
   104	
   105	   assert(!isEmpty() );
   106	
   107	   return topPtr->getItem();
   108	}
11% cat -n LinkedStack.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K Node.h
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *  @term Spring 2021
     6	 *
     7	 *  Header file for a node in the linked implementation of the ADT
     8	 *  bag.
     9	 *
    10	 *  Adapted from pages 136-137 in Carrano 7e.
    11	 *
    12	 *  @author Frank M. Carrano
    13	 *  @author Timothy Henry
    14	 *  @author Steve Holtz
    15	 *
    16	 *  @date 04 Feb 2021
    17	 *
    18	 *  @version 7.0 */
    19	
    20	#ifndef NODE_
    21	#define NODE_
    22	
    23	template <typename ItemType>
    24	class Node {
    25	private:
    26	   ItemType item;
    27	   Node<ItemType>* next = nullptr;
    28	
    29	public:
    30	   Node() = default;
    31	
    32	   Node(const ItemType& anItem,
    33	        Node<ItemType>* nextNodePtr = nullptr);
    34	
    35	   virtual ~Node() = default;
    36	
    37	   void setItem(const ItemType& anItem);
    38	   void setNext(Node<ItemType>* nextNodePtr);
    39	
    40	   ItemType getItem() const;
    41	   Node<ItemType>* getNext() const;
    42	};
    43	
    44	#include "Node.cpp"
    45	
    46	#endif
12% cat -n Node.h[Kcpp
     1	/** @file
     2	 *
     3	 *  @course CS1521
     4	 *  @section 1
     5	 *  @term Spring 2021
     6	 *
     7	 *  Implementation file for a node in the linked implementation of the
     8	 *  ADT bag.
     9	 *
    10	 *  Adapted from page 137 in Carrano 7e.
    11	 *
    12	 *  @author Frank M. Carrano
    13	 *  @author Timothy Henry
    14	 *  @author Steve Holtz
    15	 *
    16	 *  @date 04 Feb 2021
    17	 *
    18	 *  @version 7.0 */
    19	
    20	template <typename ItemType>
    21	Node<ItemType>::Node(const ItemType& anItem,
    22	                     Node<ItemType>* nextNodePtr)
    23	   : item(anItem),
    24	     next(nextNodePtr) {
    25	}
    26	
    27	template <typename ItemType>
    28	void Node<ItemType>::setItem(const ItemType& anItem) {
    29	
    30	   item = anItem;
    31	}
    32	
    33	template <typename ItemType>
    34	void Node<ItemType>::setNext(Node<ItemType>* nextNodePtr) {
    35	
    36	   next = nextNodePtr;
    37	}
    38	
    39	template <typename ItemType>
    40	ItemType Node<ItemType>::getItem() const {
    41	
    42	   return item;
    43	}
    44	
    45	template <typename ItemType>
    46	Node<ItemType>* Node<ItemType>::getNext() const {
    47	
    48	   return next;
    49	}
13% cat -n Node.cpp[K[K[K[K[K[K[K[KInfix.h
     1	// My ID: 5727889
     2	#ifndef INFIX_
     3	#define INFIX_
     4	
     5	#include <string>
     6	
     7	#include "StackInterface.h"
     8	
     9	using std::string;
    10	
    11	class Infix {
    12	 private:
    13	
    14	  /** The infix expression in its string form. */
    15	  string exp;
    16	
    17	  /** Evaluates the top expression of the two stacks; one operator and two operands.
    18	      @pre 'operatorStack' contains at least one operator, and 'valueStack' contains at least two operands.
    19	      @post 'operatorStack' will have one less item and 'valueStack' will be decremented two items and incremented one. 
    20	
    21	      @param[in, out] operatorStack A char stack containing operator characters.
    22	      @param[in, out] valueStack An int stack containing the operands. */
    23	  void evaluateTop(StackInterface<char>& operatorStack, StackInterface<int>& valueStack) const;
    24	
    25	  /** Checks if the precedence of 'op1' is greater than 'op2'
    26	      @pre 'op1' and 'op2' are operators.
    27	      @post None.
    28	  
    29	      @param[in] op1 A char operator: + | - | * | /
    30	      @param[in] op2 A char operator.
    31	      @return True if op1 has a higher precedence than op2, false if  op1 has a lower or equal precedence to op2. */
    32	  bool greaterPrecedence(char op1, char op2) const;
    33	public:
    34	
    35	  /** Explicit constructor with infix string parameter, also acts as default constructor. */
    36	  explicit Infix(const string& exp = "");
    37	
    38	  /** Default virtual destructor. */
    39	  virtual ~Infix() = default;
    40	
    41	  /** Gets the expression that this infix object represents in string form.
    42	      @pre None.
    43	      @post None.
    44	
    45	      @return An infix expression in string form */
    46	  string getExpression() const;
    47	
    48	  // Might want to make this class validate
    49	  /** Sets this object to represent a new expression.
    50	      @pre 'newExp' is a proper infix expression. <!-- this might not be necessary
    51	      @post This class now represents the expression in 'newExp'.
    52	      
    53	      @param[in] newExp The new expression that this infix object will represent. */
    54	  void setExpression(const string& newExp);
    55	
    56	  /** Evaluates the expression that this infix object represents.
    57	      @pre This class represents a valid infix expression.
    58	      @post None.
    59	
    60	      @return The integer result of the infix expression. */
    61	  int evaluate() const;
    62	};
    63	
    64	#endif // INFIX_
14% cat -n Infix.h[Kcpp
     1	// My ID: 5727889
     2	#include <string>
     3	#include <cassert>
     4	
     5	#include "Infix.h"
     6	#include "StackInterface.h"
     7	#include "LinkedStack.h"
     8	#include "DivisionByZeroExcep.h"
     9	
    10	using std::string;
    11	
    12	Infix::Infix(const string& exp) : exp(exp) {
    13	}
    14	
    15	void Infix::evaluateTop(StackInterface<char>& operatorStack, StackInterface<int>& valueStack) const {
    16	  // Operator stack has at least one item
    17	  assert(!operatorStack.isEmpty() );
    18	
    19	  // Peek the operator from the top of the operator stack and pop it
    20	  char op(operatorStack.peek() );
    21	  operatorStack.pop();
    22	
    23	  // Value stack has at least one item
    24	  assert(!valueStack.isEmpty() );
    25	
    26	  // Peek the operand from the top of the value stack (rhs) and pop it
    27	  int rhs(valueStack.peek() );
    28	  valueStack.pop();
    29	
    30	  // Value stack has at least one item (for a total of 2)
    31	  assert(!valueStack.isEmpty() );
    32	
    33	  // Peek the operand from the top of the value stack (lhs) and pop it
    34	  int lhs(valueStack.peek() );
    35	  valueStack.pop();
    36	
    37	  if (op == '/' && rhs == 0) {
    38	    throw DivisionByZeroExcep("Infinite result - Cannot handle division-by-zero.");
    39	  }
    40	
    41	  int result(0);
    42	  switch(op) {
    43	  case '+':
    44	    result = lhs + rhs;
    45	    break;
    46	    
    47	  case '-':
    48	    result = lhs - rhs;
    49	    break;
    50	
    51	  case '*':
    52	    result = lhs * rhs;
    53	    break;
    54	
    55	  case '/':
    56	    result = lhs / rhs;
    57	    break;
    58	  }
    59	
    60	  valueStack.push(result);
    61	}
    62	
    63	bool Infix::greaterPrecedence(char op1, char op2) const {
    64	  bool result;
    65	
    66	  if (op2 == '(' ) {
    67	    return true;
    68	  }
    69	  
    70	  switch (op1) {    
    71	  case '+':
    72	  case '-':
    73	    result = false;
    74	    break;
    75	
    76	  case '*':
    77	  case '/':
    78	    result = op2 != '*' && op2 != '/';
    79	    break;
    80	
    81	  default:
    82	    result = false;
    83	    break;
    84	  }
    85	
    86	  return result;
    87	}
    88	
    89	std::string Infix::getExpression() const {
    90	  return exp;
    91	}
    92	
    93	void Infix::setExpression(const string& newExp) {
    94	  exp = newExp;
    95	}
    96	
    97	int Infix::evaluate() const {
    98	  // Operator stack
    99	  LinkedStack<char> opStack;
   100	
   101	  // Value stack
   102	  LinkedStack<int> valueStack;
   103	
   104	  // Conversion from character to digit
   105	  int toDigit = -48;
   106	
   107	  for (unsigned int i(0); i < exp.size(); ++i) {
   108	    char ch = exp[i];
   109	
   110	    switch(ch) {
   111	    case '(':
   112	      opStack.push(ch);
   113	      break;
   114	      
   115	    case '+':
   116	    case '-':
   117	    case '*':
   118	    case '/':
   119	      if (opStack.isEmpty() || greaterPrecedence(ch, opStack.peek() ) ) {
   120		opStack.push(ch);
   121	      } else {
   122		while (!opStack.isEmpty() && !greaterPrecedence(ch, opStack.peek() ) ) {
   123		  evaluateTop(opStack, valueStack);
   124		}
   125		opStack.push(ch);
   126	      }
   127	      break;
   128	
   129	    case ')':
   130	      while (opStack.peek() != '(') {
   131		evaluateTop(opStack, valueStack);
   132	      }
   133	
   134	      // Pop left paren
   135	      opStack.pop();
   136	      break;
   137	
   138	    default:
   139	      // This is where I'm choosing to handle digit recognition
   140	      if (ch >= '0' && ch <= '9') {
   141		int digit = ch + toDigit;
   142		valueStack.push(digit);
   143	      }
   144	
   145	      // If it's not a digit, it's not a valid infix expression and nothing needs to happen
   146	      break;
   147	    } // end switch
   148	  } // end for
   149	
   150	  // Evaluate top of stacks until the operator stack is empty
   151	  while (!opStack.isEmpty() ) {
   152	    evaluateTop(opStack, valueStack);
   153	  }
   154	  
   155	  // Return top of value stack, which will be the fully evaluated expression
   156	  return valueStack.peek();
   157	}
15% cat -n Infix.cpp[K[K[K[K[K[K[K[K[KDivisionByZeroExcep.h 
     1	// My ID: 5727889
     2	#ifndef DIVISION_BY_ZERO_EXCEP_
     3	#define DIVISION_BY_ZERO_EXCEP_
     4	
     5	#include <stdexcept>
     6	#include <string>
     7	
     8	class DivisionByZeroExcep : public std::logic_error {
     9	 public:
    10	
    11	  /** Explicit constructor specifying the 'what' of the exception. */
    12	  explicit DivisionByZeroExcep(const std::string& message = "")
    13	    : std::logic_error(message) {
    14	  }
    15	
    16	  /** Virtual destructor */
    17	  virtual ~DivisionByZeroExcep() noexcept = default;
    18	};
    19	
    20	#endif // DIVISION_BY_ZERO_EXCEP_
16% l[Kls
build		DivisionByZeroExcep.h  Infix.cpp  LinkedStack.cpp  Node.cpp  StackInterface.h
CMakeLists.txt	driver.cpp	       Infix.h	  LinkedStack.h    Node.h    typescript.txt
17% git --no-pager log --no-color
commit e7b618bd96ca47a0f0a3acf40e22d1e4aa5c3342 (HEAD -> master)
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 16:14:18 2021 -0600

    Everything working correctly, verified using tests.dat and testDivByZero.dat.

commit 545d66eb9362c368e7e08bd366a94c9ce3a3fb15
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 16:12:39 2021 -0600

    Infix expressions working with division by zero exception throwing and handling. Main driver loop implemented. Testing with keyboard works, will test with file redirection.

commit 7564c3caf1833fd1f9732d6b91f3755945f0526e
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 15:40:05 2021 -0600

    Removed testing evaluateTop code from header and implementation Infix files. Implemented first version of int evaluate(). Will test.

commit 1df0cc1cdf7caf0bda8bfc56b0b14a8ba636f9c1
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 15:12:11 2021 -0600

    Forgot to add Node template class, added. Correctly implemented evaluateTop private helper method in Infix class.

commit 81377c955eb7ef904ec8c44539d1e98c9f0ec239
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 15:04:31 2021 -0600

    Implemented evaluateTop method. Will have to make a public test method to ensure it's working.

commit 08666b6a2ccae2f0d23e4b1e93a75ecbb74f9427
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 14:23:31 2021 -0600

    Fixed general compilation errors; project (stubbed) builds properly.

commit 4b2c7e143e29fc6b3d96f9a99927f523d8444e1c
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 14:16:13 2021 -0600

    Stubbed all methods in Infix.cpp

commit 52b9a1162fa9f8420918dbd832be87e05e243dde
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 14:09:07 2021 -0600

    Added evaluateTop method to Infix.h to evaluate the top operator and respective two top operands of operatorStack and valueStack.

commit 074c81d0e7ced7dd5846ea5b3d15518e9dd2616f
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 14:01:59 2021 -0600

    Added division by zero exception file and implemented it. Debating whether or not to make setExpression in Infix.h validate the expression and assert the precondition.

commit 9221f7f01d528097f0adda9803530b1ef2f041f4
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 13:34:05 2021 -0600

    Added header guards to infix class header.

commit edb02ea8d54230a0593eadbdc67aa13ebeb9d4b8
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 13:33:21 2021 -0600

    Flushed out driver file a little bit, and started working on specs for Infix class methods.

commit c6efec63104878fd08bbfc23bf86bb638483be2d
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 13:13:57 2021 -0600

    Made all required implementation files with ID at top, added gitignore to ignore out of source build directory. Made modern cmakelists file with everything except executable added.

commit 24f33fe29f44ce2765e46c79958b39ec5ca779dc
Author: Reece Holmdahl <reece.holmdahl@fastmail.com>
Date:   Wed Mar 10 13:07:21 2021 -0600

    Base files copied from class website
18% cd build/
19% make
[ 33%] [32mBuilding CXX object CMakeFiles/project4.dir/driver.cpp.o[0m
[ 66%] [32mBuilding CXX object CMakeFiles/project4.dir/Infix.cpp.o[0m
[100%] [32m[1mLinking CXX executable project4[0m
[100%] Built target project4
20% ./project4
3 + 2
3 + 2 = 5
(3 + 2) / 5
(3 + 2) / 5 = 1
9 * 9
9 * 9 = 81
9 * 9 / 9
9 * 9 / 9 = 9
9 * 9 /9 /    9 / 9
9 * 9 / 9 / 9 = 1
9 / 0
9 / 0 = Infinite result - Cannot handle division-by-zero.
^C
21% ./project4 < test[K[K[K[K/home/csfaculty/sholtz/pub/cs1521/projects/project4/tests[K.dat
5 + 8 = 13
5 - 8 = -3
5 * 8 = 40
5 / 8 = 0
5 + 8 + 3 = 16
5 + 8 - 3 = 10
5 + 8 * 3 = 29
5 + 8 / 3 = 7
5 - 8 + 3 = 0
5 - 8 - 3 = -6
5 - 8 * 3 = -19
5 - 8 / 3 = 3
5 * 8 + 3 = 43
5 * 8 - 3 = 37
5 * 8 * 3 = 120
5 * 8 / 3 = 13
5 / 8 + 3 = 3
5 / 8 - 3 = -3
5 / 8 * 3 = 0
5 / 8 / 3 = 0
5 + (8 + 3) = 16
5 + (8 - 3) = 10
5 + (8 * 3) = 29
5 + (8 / 3) = 7
5 - (8 + 3) = -6
5 - (8 - 3) = 0
5 - (8 * 3) = -19
5 - (8 / 3) = 3
5 * (8 + 3) = 55
5 * (8 - 3) = 25
5 * (8 * 3) = 120
5 * (8 / 3) = 10
5 / (8 + 3) = 0
5 / (8 - 3) = 1
5 / (8 * 3) = 0
5 / (8 / 3) = 2
(5 + 8) + 3 = 16
(5 + 8) - 3 = 10
(5 + 8) * 3 = 39
(5 + 8) / 3 = 4
(5 - 8) + 3 = 0
(5 - 8) - 3 = -6
(5 - 8) * 3 = -9
(5 - 8) / 3 = -1
(5 * 8) + 3 = 43
(5 * 8) - 3 = 37
(5 * 8) * 3 = 120
(5 * 8) / 3 = 13
(5 / 8) + 3 = 3
(5 / 8) - 3 = -3
(5 / 8) * 3 = 0
(5 / 8) / 3 = 0
(6) + ((4) - 6) = 4
7 + 4 * (5 + 6 * (2 - 1) / 3 + (9 + 8 * (6 - 5)) / 6) + 6 = 49
(((6 - 2) * (((9 - 3) * 7) / 6) * 3) / 6) + 5 = 19
6 - (2 * (9 - (3 * (7 / 6) * 3 / 6 + 5))) = 0
22% ./project4 < /home/csfaculty/sholtz/pub/cs1521/projects/project4/test.dat[K[K[K[K[KtDivByZero.dat
4 / 0 = Infinite result - Cannot handle division-by-zero.
8 / (6 - 6) = Infinite result - Cannot handle division-by-zero.
(2 + 9) / 0 = Infinite result - Cannot handle division-by-zero.
0 + 6 * (3 - 6 * (9 + 3) / (8 - 5 - 9 / 3) - 8) + 5 = Infinite result - Cannot handle division-by-zero.
23% ./project4 < /home/csfaculty/sholtz/pub/cs1521/projects/project4/testDivByZero.dat[74G[9P.dat[15G[K
2 + 3 * 4
2 + 3 * 4 = 14
^C
24% exit
exit

Script done on 2021-03-10 16:22:10-0600
